#include <iostream>
#include <stdlib.h>
#include <time.h>
#include <iomanip>
#include <random>
using namespace std;

void create_array_one_dimensional(int*& arr, const int N) 
{
	delete[]arr;
	arr = new int[N];
}
void free_array_one_dimensional(int*& arr) {
	delete[]arr;
}
void fill_array_one_dimensional(int* arr, const int N)
{
	for (int i = 0; i < N; i++) arr[i] = i + 1;
}
void print_array_one_dimensional(int* arr, const int N) 
{
	for (int i = 0; i < N; i++) cout << arr[i] << '\t';
	cout << '\n';
}

void create_array_one_dimensional_double(double*& arr, const int N)
{
	delete[]arr;
	arr = new double[N];
}
void free_array_one_dimensional_double(double*& arr)
{
	delete[]arr;
}
void fill_array_one_dimensional_double(double* arr, const int N)
{
	for (int i = 0; i < N; i++) arr[i] = i + 1;
}
void print_array_one_dimensional_double(double* arr, const int N)
{
	for (int i = 0; i < N; i++) cout << arr[i] << '\t';
	cout << '\n';
}

void create_array_two_dimensional_double(double**& arr, const int N, const int M)
{
	if (arr)
	{                          //Чистим память, если было применено new
		for (int i = 0; i < N; i++)
			delete[] arr[i];
		delete[] arr;
	}

	arr = new double* [N];                //Выделяем новую память
	for (int i = 0; i < N; i++)
		arr[i] = new double[M];
}
void free_array_two_dimensional_double(double**& arr, const int N)
{
	for (int i = 0; i < N; i++) delete[]arr[i];
	delete[]arr;
	arr = 0;        //обозначаем, что память на этом участке свободна
}
void fill_array_two_dimensional_double(double**& arr, const int N, const int M, int a, int b)
{
	// generate random number in [a, b] range
	random_device rd; // used to generate a seed
	mt19937 generator(rd());
	double nextafter_b = nextafter(b, numeric_limits<decltype(b)>::max());
	uniform_real_distribution<> distr(a, nextafter_b);
	double r = distr(generator);

	for (int i = 0; i < N; i++)
	{
		for (int j = 0; j < M; j++)
		{
			arr[i][j] = distr(generator);
			cout << arr[i][j] << '\t';
		}
		cout << '\n';
	}
}
void print_array_two_dimensional_double(double**& arr, const int N, const int M)
{
	for (int i = 0; i < N; i++)
	{
		for (int j = 0; j < M; j++)
		{
			cout << arr[i][j] << '\t';
		}
		cout << '\n';
	}
}

void create_array_two_dimensional(int**& arr, const int N, const int M)
{
	if (arr) 
	{                          //Чистим память, если было применено new
		for (int i = 0; i < N; i++)
			delete[] arr[i];
		delete[] arr;
	}

	arr = new int* [N];                //Выделяем новую память
	for (int i = 0; i < N; i++)
		arr[i] = new int[M];
}
void free_array_two_dimensional(int**& arr, const int N)
{
	for (int i = 0; i < N; i++) delete[]arr[i];
		delete[]arr;
	arr = 0;        //обозначаем, что память на этом участке свободна
}
void fill_array_two_dimensional(int**& arr, const int N, const int M)
{
	random_device rd;   // non-deterministic generator
	mt19937 gen(rd());  // to seed mersenne twister.
	uniform_int_distribution<> dist(-10, 10); // distribute results between -10 and 10 inclusive.

	for (int i = 0; i < N; i++) 
	{
		for (int j = 0; j < M; j++)
		{
			arr[i][j] = dist(gen);
			cout << arr[i][j] << '\t';
		}  
		cout << '\n';
	}
}
void print_array_two_dimensional(int**& arr, const int N, const int M)
{
	for (int i = 0; i < N; i++)
	{
		for (int j = 0; j < M; j++)
		{
			cout << arr[i][j] << '\t';
		} 
		cout << '\n';
	}
}

void numb1_k(int**& arr, const int N, const int M, int& k)
{
	k = 0;
	for (int i = 0; i < N; i++)
	{
		for (int j = 0; j < M; j++)
		{
			if (((arr[i][j] % 5) == 0) && (arr[i][j] != 0))
			{
				k++;
			}
		}
	}
}
void numb1(int**& arr, const int N, const int M, int*& arrB, int& max)
{
	int i_b = 0;
	max = arr[0][0];
	for (int i = 0; i < N; i++)
	{
		for (int j = 0; j < M; j++)
		{
			if (((arr[i][j] % 5) == 0) && (arr[i][j] != 0))
			{
				arrB[i_b] = arr[i][j];
				i_b++;
				if (max < arr[i][j])
					max = arr[i][j];
			}
		}
	}
}

void numb2_k(int**& arr, const int N, const int M, int& k)
{
	for (int j = 0; j < M; j++)
	{
		for (int i = 0; i < N; i++)
		{
			if (arr[i][j] > 0)
			{
				k++;
				i = N;
			}
		}
	}
}
void numb2(int**& arr, const int N, const int M, int*& arrB)
{
	int i_b = 0, product = 1;
	bool multiplication_check = false;
	for (int j = 0; j < M; j++)
	{
		for (int i = 0; i < N; i++)
		{
			if (arr[i][j] > 0)
			{
				product *= arr[i][j];
				multiplication_check = true;
			}
		}
		if ((product != 1) and multiplication_check)
		{
			arrB[i_b] = product;
			i_b++;
			product = 1;
		}
		multiplication_check = false;
	}
}
void numb2_min(int*& arrB, int& min, int k)
{
	min = arrB[0];
	for (int i = 0; i < k; i++)
	{
		if (arrB[i] < min)
			min = arrB[i];
	}
}

void numb3(int**& arrA, const int N, const int M)
{
	int min, max;
	bool check = true;
	for (int i = 0; i < N; i++)
	{
		for (int j = 0; j < M; j++)
		{
			if (check)
			{
				min = arrA[i][j];
				max = arrA[i][j];
				check = false;
			}
			if (min > arrA[i][j])
			{
				min = arrA[i][j];
			}
			if (max < arrA[i][j])
			{
				max = arrA[i][j];
			}
		}
		for (int j = 0; j < M; j++)
		{
			if (arrA[i][j] == min)
			{
				arrA[i][j] = max;
			}
			else
			{
				if (arrA[i][j] == max)
				{
					arrA[i][j] = min;
				}
			}
		}
		check = true;
	}
}

void numb4_k(double**& arrA, const int N, const int M, int& k, double b)
{
	k = 0;
	for (int i = 0; i < N; i++)
	{
		for (int j = 0; j < M; j++)
		{
			if (arrA[i][j] > b)
				k++;
		}
	}
}
void numb4(double**& arrA, const int N, const int M, double*& arrB, double b)
{
	int m = 0;
	for (int i = 0; i < N; i++)
	{
		for (int j = 0; j < M; j++)
		{
			if (arrA[i][j] > b)
			{
				arrB[m] = arrA[i][j];
				m++;
			}
		}
	}
}

void numb5(double**& arr, const int N, const int M, double& sum, double& k)
{
	sum = 0;
	k = 0;
	
	for (int i = 0; i < N; i++)
	{
		for (int j = 0; j < M; j++)
		{
			if ((j > i) && (arr[i, j] >= 0))
			{
				sum += arr[i][j];
				k++;
			}
		}
	}
}

int main()
{
	srand(static_cast<unsigned>(time(NULL)));             //Запуск генератора сучайных значений
	int** p = 0;  //Указательная переменная будет выполнять роль массива
	int* q = 0;
	int row = 0;  //Сколько строк
	int col = 0;  //Сколько колонок
	int k = 0;
	int a, b;
	int max = 0, min = 0;
	double sum = 0;

	double* q_d = 0;
	double c;

	double** p_d = 0;

	int choice;
	cin >> choice;

	switch (choice)
	{
		case 1:
			cin >> row >> col;
			create_array_two_dimensional(p, row, col);  //Выделяем память
			fill_array_two_dimensional(p, row, col);    //Заполняем массив

			numb1_k(p, row, col, k);
			create_array_one_dimensional(q, k);
			numb1(p, row, col, q, max);
			cout << endl;
			cout << endl;
			print_array_one_dimensional(q, k);
			cout << k;
			k = 0;
			free_array_one_dimensional(q);
			free_array_two_dimensional(p, row);
			break;

		case 2:
			cin >> row >> col;
			create_array_two_dimensional(p, row, col);
			fill_array_two_dimensional(p, row, col);

			numb2_k(p, row, col, k);
			create_array_one_dimensional(q, k);

			cout << k << endl;
			numb2(p, row, col, q);
			numb2_min(q, min, k);

			print_array_one_dimensional(q, k);
			cout << min;

			free_array_one_dimensional(q);
			free_array_two_dimensional(p, row);
			break;

		case 3:
			cin >> row >> col;
			create_array_two_dimensional(p, row, col);
			fill_array_two_dimensional(p, row, col);
			
			cout << endl;
			numb3(p, row, col);
			print_array_two_dimensional(p, row, col);
			free_array_two_dimensional(p, row);
			break;

		case 4:
			cin >> row >> col >> a >> b >> c;
			create_array_two_dimensional_double(p_d, row, col);
			fill_array_two_dimensional_double(p_d, row, col, a, b);

			numb4_k(p_d, row, col, k, c);

			create_array_one_dimensional_double(q_d, k);
			cout << endl;
			numb4(p_d, row, col, q_d, c);

			cout << endl;
			print_array_one_dimensional_double(q_d, k);

			free_array_two_dimensional_double(p_d, row);
			free_array_one_dimensional_double(q_d);
			break;

		case 5:
			cin >> row >> col >> a >> b;
			create_array_two_dimensional_double(p_d, row, col);
			fill_array_two_dimensional_double(p_d, row, col, a, b);

			numb5(p_d, row, col, sum, c);

			cout << sum << endl << c;

			free_array_two_dimensional_double(p_d, row);
	}


	cin.get();
}
